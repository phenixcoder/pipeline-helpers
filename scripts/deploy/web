#!/usr/bin/env node

const chalk = require('chalk');
const shell = require('shelljs');
const fs = require('fs');
const axios = require('axios');
const AWS = require('aws-sdk');
var CLOUD_FRONT = new AWS.CloudFront();

const requestP = require('request-promise-native');
const DeployRC = require('../../lib/deployrc');

const Github = require('../../lib/github');
const PackageJSON = require('../../lib/package-json');
const sync = require('../../lib/s3-sync');

async function WEB(args) {

  try {
    // Usage Example : pipeline deploy web --release 1.1.0 --environment production
    args.debug && console.log(args);
    const { environment } = args;
    let { release } = args;
    release = release.match(/(\d+\.\d+\.\d+)/)[0];

    // check if release is passed
    if (release && /[0-9]+\.[0-9]+\.[0-9]+/.test(release)) {
      // check if release is a version
    } else {
      console.log(chalk.redBright('ðŸš« Cannot continue. Invalid release passed.'));
    }

    const package = PackageJSON();
    const deployrc = DeployRC();
    if (!deployrc.environments[environment]) {
      console.log(chalk.redBright('ðŸš« Cannot continue. Invalid environment passed.'));
      console.log(`Valid environments:\n${Object.keys(deployrc.environments).map(env => chalk.yellow(' - ') + env).join('\n')}`);
      return;
    }

    const releasePackageUrl = package.repository.url.replace(/\.git$/, '').replace('https://github.com/', '');
    const [owner, repo] = releasePackageUrl.split('/');
    const octokit = Github();

    console.log(chalk.yellowBright('\nFetch Build Artifact'));
    console.log(chalk.gray(`
  Owner: ${chalk.white(owner)}
  Repo: ${chalk.white(repo)}
  Release: v${chalk.white(release)}
  `));
    let response = await octokit.request('GET /repos/{owner}/{repo}/releases/tags/{tag}', {
      owner,
      repo,
      tag: `v${release}`
    });

    if (response.data.assets[0]) {
      console.log(`
  ${chalk.green('Release Found.')}
  ${chalk.gray('Downloading release artifact.')}
    `);
    } else {
      console.log(chalk.red('Release not found.'));
      return;
    }

    response = await requestP.get({
      url: `https://${process.env.GITHUB_TOKEN}:@api.github.com/repos/${owner}/${repo}/releases/assets/${response.data.assets[0].id}`,
      headers: {
        'Accept': 'application/octet-stream',
        'User-Agent': 'pipeline-helpers',
      },
      encoding: null // secret scauce :D
    });

    if (fs.existsSync(`./build-v${release}.zip`)) {
      fs.unlinkSync(`./build-v${release}.zip`);
    }

    fs.writeFileSync(`./build-v${release}.zip`, response);

    // extract to build
    if(fs.existsSync('build')) {
      shell.rm('-rf', ['build']);
    }
    shell.mkdir('build');
    shell.exec(`unzip build-v${release}.zip -d build`, { silent: true });

    // fetch site info from terraform cloud
    console.log(chalk.yellowBright('\nFetch site information'));
    console.log(chalk.gray(`
  Terraform workspace Id: ${deployrc.environments[args.environment]}
  Environment: ${args.environment}

  Executing:
    tfc output get --workspace ${deployrc.environments[args.environment]}
  `));
    let Output = shell.exec(`tfc output get --workspace ${deployrc.environments[args.environment]}`, { silent: true }).stdout;
    Output = JSON.parse(Output);

    const TargetWebsite = Output.websites.find(({ name }) => name === deployrc.name);
    if (!TargetWebsite) {
      console.log(chalk.redBright('Error: Website not available in Infrastructure.'));
      console.log(chalk.green('Expected'), deployrc.name);
      console.log(chalk.green('Available websites in Infrastructure:\n'), Output.websites.map(({ name }) => chalk.yellow(` * ${name}`)).join('\n'));
      return;
    }

    console.log(chalk.gray(`
  ${chalk.green('Website found.')}

    Name: ${chalk.white(TargetWebsite.name)}
    Cloudfront Distribution Id: ${chalk.white(TargetWebsite.cloudfront_distribution_id)}
    Domain: ${chalk.white(TargetWebsite.domain)}
    S3 Bucket: ${chalk.white(TargetWebsite.s3_bucket)} 
    S3 Bucket Domain: ${chalk.white(TargetWebsite.s3_bucket_domain)}
  `));

    // console.log(await STS.getCallerIdentity().promise());

    // upload build/* to website S3 bucket
    console.log(chalk.yellowBright('\nUploading Artifacts'));
    console.log(chalk.gray('Uploading artifacts to S3 bucket.\n'));
    console.log(chalk.gray(`
  Target S3 bucket: ${TargetWebsite.s3_bucket}
  `));
    shell.rm('-rf', './build/__MACOSX');
    if (!args.dryRun) {
      await sync('./build', TargetWebsite.s3_bucket);
    }

    // invalidate cdn
    console.log(chalk.yellowBright('Invalidating CDN'));
    const invalidationParams = {
      DistributionId: TargetWebsite.cloudfront_distribution_id,
      InvalidationBatch: {
        CallerReference: Date.now().toString(),
        Paths: {
          Quantity: 1,
          Items: [
            '/*',
          ]
        }
      }
    };
    console.log(chalk.gray('Distribution Id'), TargetWebsite.cloudfront_distribution_id);
    if (!args.dryRun) {
      console.log(chalk.gray('Invalidation link:'), await (await CLOUD_FRONT.createInvalidation(invalidationParams).promise()).Location);
    }

    // test version.json on website via CDN matches build/version.json
    console.log(chalk.yellowBright('\nTesting Deployment'));
    console.log(chalk.gray('Validateing deployed verison.json hash.\n'));
    var config = {
      method: 'get',
      url: `https://${TargetWebsite.domain}/version.json`,
      headers: {}
    };

    const fetchedVersion = (await axios(config)).data;
    const localVersion = JSON.parse(fs.readFileSync('./build/version.json'));
    console.log(chalk.gray(`
  Deployment hashes matched.
  Deployed Hash: ${chalk.white(fetchedVersion.hash)}
  Local Hash:    ${chalk.white(localVersion.hash)}
  `));
    console.log(chalk.greenBright('Deployment Successfull !!!'));
    console.log();
    return;
  } catch (error) {
    console.log(chalk.redBright(`Error: ${error}`));
  }
}

module.exports = WEB;